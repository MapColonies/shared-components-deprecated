["<Icon icon=\"favorite\" />","<Icon\n  icon={\n    <div\n      style={{\n        background: 'green',\n        width: '24px',\n        height: '24px',\n        borderRadius: '100px'\n      }}\n    />\n  }\n/>","<>\n  {/**\n    If you have additional options,\n    you can pass an object of options to the icon prop.\n  */}\n  <Icon icon={{ icon: 'star', strategy: 'ligature' }} />\n\n  {/**\n    Passing additional props is especially helpful when the entire icon\n    component isn't exposed. In this example we pass the additional\n    onMouseOver prop directly to the icon\n  */}\n  <Button\n    label=\"Hello!\"\n    icon={{\n      icon: 'add',\n      onMouseOver: () => console.log('OVER')\n    }}\n  />\n</>","<>\n  {/* 18px */}\n  <Icon icon={{ icon: 'favorite', size: 'xsmall' }} />\n  {/* 20px */}\n  <Icon icon={{ icon: 'favorite', size: 'small' }} />\n  {/* 24px */}\n  <Icon icon={{ icon: 'favorite', size: 'medium' }} />\n  {/* 36px */}\n  <Icon icon={{ icon: 'favorite', size: 'large' }} />\n  {/* 48px */}\n  <Icon icon={{ icon: 'favorite', size: 'xlarge' }} />\n</>","<>\n  <Icon icon=\"favorite\" />\n  <Icon icon=\"favorite_outline\" />\n  {/* Example showing how to set the strategy explicitly */}\n  <Icon icon={{ icon: 'star', strategy: 'ligature' }} />\n</>","<>\n  {/** Auto detection */}\n  <Icon icon=\"images/icons/twitter.png\" />\n  {/** Explicit */}\n  <Icon\n    icon={{\n      icon: 'images/icons/twitter.png',\n      strategy: 'url'\n    }}\n  />\n</>","<>\n  {/** Auto detection */}\n  <Icon\n    icon={\n      <div\n        style={{\n          background: 'green',\n          width: '24px',\n          height: '24px',\n          borderRadius: '100px'\n        }}\n      />\n    }\n  />\n  {/** Explicit */}\n  <Icon\n    icon={{\n      strategy: 'component',\n      icon: (\n        <svg\n          style={{ width: '24px', height: '24px' }}\n          viewBox=\"0 0 24 24\"\n        >\n          <path\n            fill=\"#4285F4\"\n            d=\"M21.35,11.1H12.18V13.83H18.69C18.36,17.64 15.19,19.27 12.19,19.27C8.36,19.27 5,16.25 5,12C5,7.9 8.2,4.73 12.2,4.73C15.29,4.73 17.1,6.7 17.1,6.7L19,4.72C19,4.72 16.56,2 12.1,2C6.42,2 2.03,6.8 2.03,12C2.03,17.05 6.16,22 12.25,22C17.6,22 21.5,18.33 21.5,12.91C21.5,11.76 21.35,11.1 21.35,11.1V11.1Z\"\n          />\n        </svg>\n      )\n    }}\n  />\n</>","<>\n  {/* Ion Icons <i class=\"icon ion-star\"></i> */}\n  <Icon\n    icon={{\n      icon: 'star',\n      strategy: 'className',\n      basename: 'icon',\n      prefix: 'ion-'\n    }}\n  />\n  {/**\n   * Set the option globally throug RMWCProvider\n   * Glyphicons <span class=\"glyphicons glyphicons-heart\"></span>\n   **/}\n  <RMWCProvider\n    icon={{\n      strategy: 'className',\n      basename: 'glyphicons',\n      prefix: 'glyphicons-'\n    }}\n  >\n    <Icon icon=\"heart\" />\n  </RMWCProvider>\n</>","<Icon\n  icon={{\n    icon: 'favorite',\n    strategy: 'custom',\n    render: ({ content }) => <div>Hello + {content}</div>\n  }}\n/>","\n  `\n  // 1) Your app has an icon component you use\n  import { MyIconComponent } from '@rmwc/icon';\n  <MyIconComponent name=\"search\" />\n\n  // 2) Now you are using RMWC, lots of components are instances of Icons\n  // You need to be able to delegate the handling of an icon prop to your own component\n  import { TextField } from '@rmwc/textField';\n  import { Chip } from '@rmwc/chip';\n  <TextField icon=\"favorite\" />\n  <Chip icon=\"favorite\" />\n\n  // 3) Instead, you should set the custom strategy to be your default\n  // and add your own handling with RMWCProvider\n  import React from 'react';\n  import * as ReactDOM from 'react-dom';\n  import App from './App'; // your main app component\n  import { RMWCProvider } from '@rmwc/provider';\n  import { MyIconComponent } from '@rmwc/icon';\n\n  const iconRenderHandler = ({ content, className, ...rest }) => {\n    // content is whatever was passed to the icon prop\n\n    // className is the fully processed className taking into account the basename and prefix defaults\n    // it's important to include this because MDC often has classes like text-field-icon directly\n    // on the component for alignment\n\n    // rest is just any other props\n    return <MyIconComponent className={className} name={content} {...rest} />\n  };\n\n  ReactDOM.render(\n    <RMWCProvider icon={{strategy: 'custom', render: iconRenderHandler}}>\n      <App />\n    </RMWCProvider>,\n    document.getElementById('root')\n  );\n\n  // 4) Now anywhere in your app that an Icon instance is used, it will be\n  // delegated to your handler and render your custom component\n  import { TextFieldIcon } from '@rmwc/textfield';\n  <TextFieldIcon icon=\"search\" />\n`\n"]
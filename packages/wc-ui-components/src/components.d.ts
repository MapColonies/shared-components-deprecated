/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { colorType } from "./components/button/mwc-button-types";
import { alignType, displayType, typographyType } from "./components/typography/mwc-typograpy-types";
export namespace Components {
    interface MwcButton {
        "backgroundcolor": string;
        "color": colorType;
        "compact": boolean;
        "dense": boolean;
        "disabled": boolean;
        "fab": boolean;
        "href": string;
        "icon": string;
        "mini": boolean;
        "raised": boolean;
        "ripple": boolean;
        "stroked": boolean;
        "unelevated": boolean;
    }
    interface MwcCard {
        "height": string;
        "radius": number;
        "raised": boolean;
        "width": string;
    }
    interface MwcCardActions {
    }
    interface MwcCardContent {
    }
    interface MwcCardHeader {
        "maintitle": string;
        "subtitle": string;
    }
    interface MwcCardMedia {
        "mediaheight": string;
        "src": string;
    }
    interface MwcCheckbox {
        "alignlabel": string;
        "checkcolor": string;
        "checked": boolean;
        "disabled": boolean;
        "indeterminate": boolean;
        "label": string;
        "name": string;
        "ripple": boolean;
        "value": string;
    }
    interface MwcContainer {
        "aligncontent": string;
        "alignitems": string;
        "backgroundcolor": string;
        "flexdirection": string;
        "flexwrap": string;
        "height": string;
        "justifycontent": string;
        "width": string;
    }
    interface MwcContentForToolbar {
    }
    interface MwcDialog {
        "close": () => Promise<void>;
        "height": string;
        "show": () => Promise<void>;
        "width": string;
    }
    interface MwcDialogBody {
    }
    interface MwcDialogFooter {
    }
    interface MwcDialogHeader {
    }
    interface MwcDrawer {
        "close": () => Promise<void>;
        "header": boolean;
        "open": () => Promise<void>;
        "toolbarspacer": boolean;
        "type": String;
    }
    interface MwcFab {
        "backgroundcolor": string;
        "color": string;
        "icon": string;
        "mini": boolean;
        "ripple": boolean;
    }
    interface MwcGridList {
        "aspectratio": string;
        "tiletitleposition": string;
        "tilewidth": string;
    }
    interface MwcGridListTile {
        "titlebackgroundcolor": string;
    }
    interface MwcIconToggle {
        "color": string;
        "disabled": boolean;
        "officon": string;
        "officonlabel": string;
        "onicon": string;
        "oniconlabel": string;
        "ripple": boolean;
        "toggleon": boolean;
    }
    interface MwcList {
        "borderlist": boolean;
        "dense": boolean;
    }
    interface MwcListItem {
        "interactive": boolean;
        "ripple": boolean;
    }
    interface MwcMenu {
        "hide": () => Promise<void>;
        "open": boolean;
        "show": (focusIndex: number) => Promise<void>;
    }
    interface MwcMenuItem {
        "disabled": boolean;
        "role": string;
    }
    interface MwcPaper {
        "elevation": number;
        "height": string;
        "radius": number;
        "width": string;
    }
    interface MwcProgress {
        "buffer": (value: any) => Promise<void>;
        "bufferbarcolor": string;
        "height": string;
        "progress": (value: any) => Promise<void>;
        "progressbarcolor": string;
        "reversed": boolean;
        "show": boolean;
        "type": string;
        "width": string;
    }
    interface MwcRadio {
        "borderlist": boolean;
        "checked": boolean;
        "color": 'default' | 'primary' | 'secondary';
        "dense": boolean;
        "name": string;
        "ripple": boolean;
    }
    interface MwcSelect {
        "borderlist": boolean;
        "checked": boolean;
        "dense": boolean;
        "name": string;
        "radiocolor": string;
        "ripple": boolean;
    }
    interface MwcSlider {
        "disabled": boolean;
        "discrete": boolean;
        "max": number;
        "min": number;
        "slidercolor": string;
        "step": number;
        "stepdown": (amount?: number) => Promise<void>;
        "stepup": (amount?: number) => Promise<void>;
        "value": number;
    }
    interface MwcSnackbar {
        "actioncolor": string;
        "actiononbutton": boolean;
        "actiontext": string;
        "backgroundcolor": string;
        "dismissesonaction": boolean;
        "message": string;
        "messagecolor": string;
        "multiline": boolean;
        "show": () => Promise<void>;
        "timeout": number;
    }
    interface MwcSwitch {
        "checked": boolean;
        "disabled": boolean;
        "label": string;
        "labelposition": string;
        "switchcolor": string;
    }
    interface MwcTabbar {
        "activeindex": number;
        "scroller": boolean;
        "tabs": Array<any>;
    }
    interface MwcTextfield {
        "dense": boolean;
        "disabled": boolean;
        "focused": boolean;
        "fullwidth": boolean;
        "helpertext": string;
        "icon": string;
        "iconposition": string;
        "label": string;
        "labelposition": string;
        "minlength": number;
        "outlined": boolean;
        "required": boolean;
        "showbox": boolean;
        "textarea": boolean;
        "type": string;
        "value": string;
    }
    interface MwcTheme {
        "fonts": Array<string>;
        "icons": Array<string>;
        "theme": object;
    }
    interface MwcToolbar {
        "type": string;
    }
    interface MwcToolbarIcon {
    }
    interface MwcToolbarSection {
        "align": string;
    }
    interface MwcToolbarTitle {
    }
    interface MwcTypography {
        "align": alignType;
        "color": string;
        "display": displayType;
        "gutterbottom": boolean;
        "nowrap": boolean;
        "styles": any;
        "type": typographyType;
    }
    interface MwcViewport {
        "backgroundcolor": string;
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
}
declare global {
    interface HTMLMwcButtonElement extends Components.MwcButton, HTMLStencilElement {
    }
    var HTMLMwcButtonElement: {
        prototype: HTMLMwcButtonElement;
        new (): HTMLMwcButtonElement;
    };
    interface HTMLMwcCardElement extends Components.MwcCard, HTMLStencilElement {
    }
    var HTMLMwcCardElement: {
        prototype: HTMLMwcCardElement;
        new (): HTMLMwcCardElement;
    };
    interface HTMLMwcCardActionsElement extends Components.MwcCardActions, HTMLStencilElement {
    }
    var HTMLMwcCardActionsElement: {
        prototype: HTMLMwcCardActionsElement;
        new (): HTMLMwcCardActionsElement;
    };
    interface HTMLMwcCardContentElement extends Components.MwcCardContent, HTMLStencilElement {
    }
    var HTMLMwcCardContentElement: {
        prototype: HTMLMwcCardContentElement;
        new (): HTMLMwcCardContentElement;
    };
    interface HTMLMwcCardHeaderElement extends Components.MwcCardHeader, HTMLStencilElement {
    }
    var HTMLMwcCardHeaderElement: {
        prototype: HTMLMwcCardHeaderElement;
        new (): HTMLMwcCardHeaderElement;
    };
    interface HTMLMwcCardMediaElement extends Components.MwcCardMedia, HTMLStencilElement {
    }
    var HTMLMwcCardMediaElement: {
        prototype: HTMLMwcCardMediaElement;
        new (): HTMLMwcCardMediaElement;
    };
    interface HTMLMwcCheckboxElement extends Components.MwcCheckbox, HTMLStencilElement {
    }
    var HTMLMwcCheckboxElement: {
        prototype: HTMLMwcCheckboxElement;
        new (): HTMLMwcCheckboxElement;
    };
    interface HTMLMwcContainerElement extends Components.MwcContainer, HTMLStencilElement {
    }
    var HTMLMwcContainerElement: {
        prototype: HTMLMwcContainerElement;
        new (): HTMLMwcContainerElement;
    };
    interface HTMLMwcContentForToolbarElement extends Components.MwcContentForToolbar, HTMLStencilElement {
    }
    var HTMLMwcContentForToolbarElement: {
        prototype: HTMLMwcContentForToolbarElement;
        new (): HTMLMwcContentForToolbarElement;
    };
    interface HTMLMwcDialogElement extends Components.MwcDialog, HTMLStencilElement {
    }
    var HTMLMwcDialogElement: {
        prototype: HTMLMwcDialogElement;
        new (): HTMLMwcDialogElement;
    };
    interface HTMLMwcDialogBodyElement extends Components.MwcDialogBody, HTMLStencilElement {
    }
    var HTMLMwcDialogBodyElement: {
        prototype: HTMLMwcDialogBodyElement;
        new (): HTMLMwcDialogBodyElement;
    };
    interface HTMLMwcDialogFooterElement extends Components.MwcDialogFooter, HTMLStencilElement {
    }
    var HTMLMwcDialogFooterElement: {
        prototype: HTMLMwcDialogFooterElement;
        new (): HTMLMwcDialogFooterElement;
    };
    interface HTMLMwcDialogHeaderElement extends Components.MwcDialogHeader, HTMLStencilElement {
    }
    var HTMLMwcDialogHeaderElement: {
        prototype: HTMLMwcDialogHeaderElement;
        new (): HTMLMwcDialogHeaderElement;
    };
    interface HTMLMwcDrawerElement extends Components.MwcDrawer, HTMLStencilElement {
    }
    var HTMLMwcDrawerElement: {
        prototype: HTMLMwcDrawerElement;
        new (): HTMLMwcDrawerElement;
    };
    interface HTMLMwcFabElement extends Components.MwcFab, HTMLStencilElement {
    }
    var HTMLMwcFabElement: {
        prototype: HTMLMwcFabElement;
        new (): HTMLMwcFabElement;
    };
    interface HTMLMwcGridListElement extends Components.MwcGridList, HTMLStencilElement {
    }
    var HTMLMwcGridListElement: {
        prototype: HTMLMwcGridListElement;
        new (): HTMLMwcGridListElement;
    };
    interface HTMLMwcGridListTileElement extends Components.MwcGridListTile, HTMLStencilElement {
    }
    var HTMLMwcGridListTileElement: {
        prototype: HTMLMwcGridListTileElement;
        new (): HTMLMwcGridListTileElement;
    };
    interface HTMLMwcIconToggleElement extends Components.MwcIconToggle, HTMLStencilElement {
    }
    var HTMLMwcIconToggleElement: {
        prototype: HTMLMwcIconToggleElement;
        new (): HTMLMwcIconToggleElement;
    };
    interface HTMLMwcListElement extends Components.MwcList, HTMLStencilElement {
    }
    var HTMLMwcListElement: {
        prototype: HTMLMwcListElement;
        new (): HTMLMwcListElement;
    };
    interface HTMLMwcListItemElement extends Components.MwcListItem, HTMLStencilElement {
    }
    var HTMLMwcListItemElement: {
        prototype: HTMLMwcListItemElement;
        new (): HTMLMwcListItemElement;
    };
    interface HTMLMwcMenuElement extends Components.MwcMenu, HTMLStencilElement {
    }
    var HTMLMwcMenuElement: {
        prototype: HTMLMwcMenuElement;
        new (): HTMLMwcMenuElement;
    };
    interface HTMLMwcMenuItemElement extends Components.MwcMenuItem, HTMLStencilElement {
    }
    var HTMLMwcMenuItemElement: {
        prototype: HTMLMwcMenuItemElement;
        new (): HTMLMwcMenuItemElement;
    };
    interface HTMLMwcPaperElement extends Components.MwcPaper, HTMLStencilElement {
    }
    var HTMLMwcPaperElement: {
        prototype: HTMLMwcPaperElement;
        new (): HTMLMwcPaperElement;
    };
    interface HTMLMwcProgressElement extends Components.MwcProgress, HTMLStencilElement {
    }
    var HTMLMwcProgressElement: {
        prototype: HTMLMwcProgressElement;
        new (): HTMLMwcProgressElement;
    };
    interface HTMLMwcRadioElement extends Components.MwcRadio, HTMLStencilElement {
    }
    var HTMLMwcRadioElement: {
        prototype: HTMLMwcRadioElement;
        new (): HTMLMwcRadioElement;
    };
    interface HTMLMwcSelectElement extends Components.MwcSelect, HTMLStencilElement {
    }
    var HTMLMwcSelectElement: {
        prototype: HTMLMwcSelectElement;
        new (): HTMLMwcSelectElement;
    };
    interface HTMLMwcSliderElement extends Components.MwcSlider, HTMLStencilElement {
    }
    var HTMLMwcSliderElement: {
        prototype: HTMLMwcSliderElement;
        new (): HTMLMwcSliderElement;
    };
    interface HTMLMwcSnackbarElement extends Components.MwcSnackbar, HTMLStencilElement {
    }
    var HTMLMwcSnackbarElement: {
        prototype: HTMLMwcSnackbarElement;
        new (): HTMLMwcSnackbarElement;
    };
    interface HTMLMwcSwitchElement extends Components.MwcSwitch, HTMLStencilElement {
    }
    var HTMLMwcSwitchElement: {
        prototype: HTMLMwcSwitchElement;
        new (): HTMLMwcSwitchElement;
    };
    interface HTMLMwcTabbarElement extends Components.MwcTabbar, HTMLStencilElement {
    }
    var HTMLMwcTabbarElement: {
        prototype: HTMLMwcTabbarElement;
        new (): HTMLMwcTabbarElement;
    };
    interface HTMLMwcTextfieldElement extends Components.MwcTextfield, HTMLStencilElement {
    }
    var HTMLMwcTextfieldElement: {
        prototype: HTMLMwcTextfieldElement;
        new (): HTMLMwcTextfieldElement;
    };
    interface HTMLMwcThemeElement extends Components.MwcTheme, HTMLStencilElement {
    }
    var HTMLMwcThemeElement: {
        prototype: HTMLMwcThemeElement;
        new (): HTMLMwcThemeElement;
    };
    interface HTMLMwcToolbarElement extends Components.MwcToolbar, HTMLStencilElement {
    }
    var HTMLMwcToolbarElement: {
        prototype: HTMLMwcToolbarElement;
        new (): HTMLMwcToolbarElement;
    };
    interface HTMLMwcToolbarIconElement extends Components.MwcToolbarIcon, HTMLStencilElement {
    }
    var HTMLMwcToolbarIconElement: {
        prototype: HTMLMwcToolbarIconElement;
        new (): HTMLMwcToolbarIconElement;
    };
    interface HTMLMwcToolbarSectionElement extends Components.MwcToolbarSection, HTMLStencilElement {
    }
    var HTMLMwcToolbarSectionElement: {
        prototype: HTMLMwcToolbarSectionElement;
        new (): HTMLMwcToolbarSectionElement;
    };
    interface HTMLMwcToolbarTitleElement extends Components.MwcToolbarTitle, HTMLStencilElement {
    }
    var HTMLMwcToolbarTitleElement: {
        prototype: HTMLMwcToolbarTitleElement;
        new (): HTMLMwcToolbarTitleElement;
    };
    interface HTMLMwcTypographyElement extends Components.MwcTypography, HTMLStencilElement {
    }
    var HTMLMwcTypographyElement: {
        prototype: HTMLMwcTypographyElement;
        new (): HTMLMwcTypographyElement;
    };
    interface HTMLMwcViewportElement extends Components.MwcViewport, HTMLStencilElement {
    }
    var HTMLMwcViewportElement: {
        prototype: HTMLMwcViewportElement;
        new (): HTMLMwcViewportElement;
    };
    interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {
    }
    var HTMLMyComponentElement: {
        prototype: HTMLMyComponentElement;
        new (): HTMLMyComponentElement;
    };
    interface HTMLElementTagNameMap {
        "mwc-button": HTMLMwcButtonElement;
        "mwc-card": HTMLMwcCardElement;
        "mwc-card-actions": HTMLMwcCardActionsElement;
        "mwc-card-content": HTMLMwcCardContentElement;
        "mwc-card-header": HTMLMwcCardHeaderElement;
        "mwc-card-media": HTMLMwcCardMediaElement;
        "mwc-checkbox": HTMLMwcCheckboxElement;
        "mwc-container": HTMLMwcContainerElement;
        "mwc-content-for-toolbar": HTMLMwcContentForToolbarElement;
        "mwc-dialog": HTMLMwcDialogElement;
        "mwc-dialog-body": HTMLMwcDialogBodyElement;
        "mwc-dialog-footer": HTMLMwcDialogFooterElement;
        "mwc-dialog-header": HTMLMwcDialogHeaderElement;
        "mwc-drawer": HTMLMwcDrawerElement;
        "mwc-fab": HTMLMwcFabElement;
        "mwc-grid-list": HTMLMwcGridListElement;
        "mwc-grid-list-tile": HTMLMwcGridListTileElement;
        "mwc-icon-toggle": HTMLMwcIconToggleElement;
        "mwc-list": HTMLMwcListElement;
        "mwc-list-item": HTMLMwcListItemElement;
        "mwc-menu": HTMLMwcMenuElement;
        "mwc-menu-item": HTMLMwcMenuItemElement;
        "mwc-paper": HTMLMwcPaperElement;
        "mwc-progress": HTMLMwcProgressElement;
        "mwc-radio": HTMLMwcRadioElement;
        "mwc-select": HTMLMwcSelectElement;
        "mwc-slider": HTMLMwcSliderElement;
        "mwc-snackbar": HTMLMwcSnackbarElement;
        "mwc-switch": HTMLMwcSwitchElement;
        "mwc-tabbar": HTMLMwcTabbarElement;
        "mwc-textfield": HTMLMwcTextfieldElement;
        "mwc-theme": HTMLMwcThemeElement;
        "mwc-toolbar": HTMLMwcToolbarElement;
        "mwc-toolbar-icon": HTMLMwcToolbarIconElement;
        "mwc-toolbar-section": HTMLMwcToolbarSectionElement;
        "mwc-toolbar-title": HTMLMwcToolbarTitleElement;
        "mwc-typography": HTMLMwcTypographyElement;
        "mwc-viewport": HTMLMwcViewportElement;
        "my-component": HTMLMyComponentElement;
    }
}
declare namespace LocalJSX {
    interface MwcButton {
        "backgroundcolor"?: string;
        "color"?: colorType;
        "compact"?: boolean;
        "dense"?: boolean;
        "disabled"?: boolean;
        "fab"?: boolean;
        "href"?: string;
        "icon"?: string;
        "mini"?: boolean;
        "onOnClick"?: (event: CustomEvent<any>) => void;
        "raised"?: boolean;
        "ripple"?: boolean;
        "stroked"?: boolean;
        "unelevated"?: boolean;
    }
    interface MwcCard {
        "height"?: string;
        "radius"?: number;
        "raised"?: boolean;
        "width"?: string;
    }
    interface MwcCardActions {
    }
    interface MwcCardContent {
    }
    interface MwcCardHeader {
        "maintitle"?: string;
        "subtitle"?: string;
    }
    interface MwcCardMedia {
        "mediaheight"?: string;
        "src"?: string;
    }
    interface MwcCheckbox {
        "alignlabel"?: string;
        "checkcolor"?: string;
        "checked"?: boolean;
        "disabled"?: boolean;
        "indeterminate"?: boolean;
        "label"?: string;
        "name"?: string;
        "onChangeHandler"?: (event: CustomEvent<any>) => void;
        "ripple"?: boolean;
        "value"?: string;
    }
    interface MwcContainer {
        "aligncontent"?: string;
        "alignitems"?: string;
        "backgroundcolor"?: string;
        "flexdirection"?: string;
        "flexwrap"?: string;
        "height"?: string;
        "justifycontent"?: string;
        "width"?: string;
    }
    interface MwcContentForToolbar {
    }
    interface MwcDialog {
        "height"?: string;
        "onAccepted"?: (event: CustomEvent<any>) => void;
        "onCanceled"?: (event: CustomEvent<any>) => void;
        "width"?: string;
    }
    interface MwcDialogBody {
    }
    interface MwcDialogFooter {
    }
    interface MwcDialogHeader {
    }
    interface MwcDrawer {
        "header"?: boolean;
        "onOndrawerclose"?: (event: CustomEvent<any>) => void;
        "onOndraweropen"?: (event: CustomEvent<any>) => void;
        "toolbarspacer"?: boolean;
        "type"?: String;
    }
    interface MwcFab {
        "backgroundcolor"?: string;
        "color"?: string;
        "icon"?: string;
        "mini"?: boolean;
        "ripple"?: boolean;
    }
    interface MwcGridList {
        "aspectratio"?: string;
        "tiletitleposition"?: string;
        "tilewidth"?: string;
    }
    interface MwcGridListTile {
        "titlebackgroundcolor"?: string;
    }
    interface MwcIconToggle {
        "color"?: string;
        "disabled"?: boolean;
        "officon"?: string;
        "officonlabel"?: string;
        "onOniconchange"?: (event: CustomEvent<any>) => void;
        "onicon"?: string;
        "oniconlabel"?: string;
        "ripple"?: boolean;
        "toggleon"?: boolean;
    }
    interface MwcList {
        "borderlist"?: boolean;
        "dense"?: boolean;
    }
    interface MwcListItem {
        "interactive"?: boolean;
        "ripple"?: boolean;
    }
    interface MwcMenu {
        "onSelected"?: (event: CustomEvent<any>) => void;
        "open"?: boolean;
    }
    interface MwcMenuItem {
        "disabled"?: boolean;
        "role"?: string;
    }
    interface MwcPaper {
        "elevation"?: number;
        "height"?: string;
        "radius"?: number;
        "width"?: string;
    }
    interface MwcProgress {
        "bufferbarcolor"?: string;
        "height"?: string;
        "progressbarcolor"?: string;
        "reversed"?: boolean;
        "show"?: boolean;
        "type"?: string;
        "width"?: string;
    }
    interface MwcRadio {
        "borderlist"?: boolean;
        "checked"?: boolean;
        "color"?: 'default' | 'primary' | 'secondary';
        "dense"?: boolean;
        "name"?: string;
        "ripple"?: boolean;
    }
    interface MwcSelect {
        "borderlist"?: boolean;
        "checked"?: boolean;
        "dense"?: boolean;
        "name"?: string;
        "radiocolor"?: string;
        "ripple"?: boolean;
    }
    interface MwcSlider {
        "disabled"?: boolean;
        "discrete"?: boolean;
        "max"?: number;
        "min"?: number;
        "onChangeHandler"?: (event: CustomEvent<any>) => void;
        "onInputchange"?: (event: CustomEvent<any>) => void;
        "slidercolor"?: string;
        "step"?: number;
        "value"?: number;
    }
    interface MwcSnackbar {
        "actioncolor"?: string;
        "actiononbutton"?: boolean;
        "actiontext"?: string;
        "backgroundcolor"?: string;
        "dismissesonaction"?: boolean;
        "message"?: string;
        "messagecolor"?: string;
        "multiline"?: boolean;
        "onActionhandler"?: (event: CustomEvent<any>) => void;
        "onSelected"?: (event: CustomEvent<any>) => void;
        "timeout"?: number;
    }
    interface MwcSwitch {
        "checked"?: boolean;
        "disabled"?: boolean;
        "label"?: string;
        "labelposition"?: string;
        "onSelected"?: (event: CustomEvent<any>) => void;
        "switchcolor"?: string;
    }
    interface MwcTabbar {
        "activeindex"?: number;
        "onChange"?: (event: CustomEvent<any>) => void;
        "scroller"?: boolean;
        "tabs"?: Array<any>;
    }
    interface MwcTextfield {
        "dense"?: boolean;
        "disabled"?: boolean;
        "focused"?: boolean;
        "fullwidth"?: boolean;
        "helpertext"?: string;
        "icon"?: string;
        "iconposition"?: string;
        "label"?: string;
        "labelposition"?: string;
        "minlength"?: number;
        "onSelected"?: (event: CustomEvent<any>) => void;
        "outlined"?: boolean;
        "required"?: boolean;
        "showbox"?: boolean;
        "textarea"?: boolean;
        "type"?: string;
        "value"?: string;
    }
    interface MwcTheme {
        "fonts"?: Array<string>;
        "icons"?: Array<string>;
        "theme"?: object;
    }
    interface MwcToolbar {
        "type"?: string;
    }
    interface MwcToolbarIcon {
    }
    interface MwcToolbarSection {
        "align"?: string;
    }
    interface MwcToolbarTitle {
    }
    interface MwcTypography {
        "align"?: alignType;
        "color"?: string;
        "display"?: displayType;
        "gutterbottom"?: boolean;
        "nowrap"?: boolean;
        "styles"?: any;
        "type"?: typographyType;
    }
    interface MwcViewport {
        "backgroundcolor"?: string;
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface IntrinsicElements {
        "mwc-button": MwcButton;
        "mwc-card": MwcCard;
        "mwc-card-actions": MwcCardActions;
        "mwc-card-content": MwcCardContent;
        "mwc-card-header": MwcCardHeader;
        "mwc-card-media": MwcCardMedia;
        "mwc-checkbox": MwcCheckbox;
        "mwc-container": MwcContainer;
        "mwc-content-for-toolbar": MwcContentForToolbar;
        "mwc-dialog": MwcDialog;
        "mwc-dialog-body": MwcDialogBody;
        "mwc-dialog-footer": MwcDialogFooter;
        "mwc-dialog-header": MwcDialogHeader;
        "mwc-drawer": MwcDrawer;
        "mwc-fab": MwcFab;
        "mwc-grid-list": MwcGridList;
        "mwc-grid-list-tile": MwcGridListTile;
        "mwc-icon-toggle": MwcIconToggle;
        "mwc-list": MwcList;
        "mwc-list-item": MwcListItem;
        "mwc-menu": MwcMenu;
        "mwc-menu-item": MwcMenuItem;
        "mwc-paper": MwcPaper;
        "mwc-progress": MwcProgress;
        "mwc-radio": MwcRadio;
        "mwc-select": MwcSelect;
        "mwc-slider": MwcSlider;
        "mwc-snackbar": MwcSnackbar;
        "mwc-switch": MwcSwitch;
        "mwc-tabbar": MwcTabbar;
        "mwc-textfield": MwcTextfield;
        "mwc-theme": MwcTheme;
        "mwc-toolbar": MwcToolbar;
        "mwc-toolbar-icon": MwcToolbarIcon;
        "mwc-toolbar-section": MwcToolbarSection;
        "mwc-toolbar-title": MwcToolbarTitle;
        "mwc-typography": MwcTypography;
        "mwc-viewport": MwcViewport;
        "my-component": MyComponent;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "mwc-button": LocalJSX.MwcButton & JSXBase.HTMLAttributes<HTMLMwcButtonElement>;
            "mwc-card": LocalJSX.MwcCard & JSXBase.HTMLAttributes<HTMLMwcCardElement>;
            "mwc-card-actions": LocalJSX.MwcCardActions & JSXBase.HTMLAttributes<HTMLMwcCardActionsElement>;
            "mwc-card-content": LocalJSX.MwcCardContent & JSXBase.HTMLAttributes<HTMLMwcCardContentElement>;
            "mwc-card-header": LocalJSX.MwcCardHeader & JSXBase.HTMLAttributes<HTMLMwcCardHeaderElement>;
            "mwc-card-media": LocalJSX.MwcCardMedia & JSXBase.HTMLAttributes<HTMLMwcCardMediaElement>;
            "mwc-checkbox": LocalJSX.MwcCheckbox & JSXBase.HTMLAttributes<HTMLMwcCheckboxElement>;
            "mwc-container": LocalJSX.MwcContainer & JSXBase.HTMLAttributes<HTMLMwcContainerElement>;
            "mwc-content-for-toolbar": LocalJSX.MwcContentForToolbar & JSXBase.HTMLAttributes<HTMLMwcContentForToolbarElement>;
            "mwc-dialog": LocalJSX.MwcDialog & JSXBase.HTMLAttributes<HTMLMwcDialogElement>;
            "mwc-dialog-body": LocalJSX.MwcDialogBody & JSXBase.HTMLAttributes<HTMLMwcDialogBodyElement>;
            "mwc-dialog-footer": LocalJSX.MwcDialogFooter & JSXBase.HTMLAttributes<HTMLMwcDialogFooterElement>;
            "mwc-dialog-header": LocalJSX.MwcDialogHeader & JSXBase.HTMLAttributes<HTMLMwcDialogHeaderElement>;
            "mwc-drawer": LocalJSX.MwcDrawer & JSXBase.HTMLAttributes<HTMLMwcDrawerElement>;
            "mwc-fab": LocalJSX.MwcFab & JSXBase.HTMLAttributes<HTMLMwcFabElement>;
            "mwc-grid-list": LocalJSX.MwcGridList & JSXBase.HTMLAttributes<HTMLMwcGridListElement>;
            "mwc-grid-list-tile": LocalJSX.MwcGridListTile & JSXBase.HTMLAttributes<HTMLMwcGridListTileElement>;
            "mwc-icon-toggle": LocalJSX.MwcIconToggle & JSXBase.HTMLAttributes<HTMLMwcIconToggleElement>;
            "mwc-list": LocalJSX.MwcList & JSXBase.HTMLAttributes<HTMLMwcListElement>;
            "mwc-list-item": LocalJSX.MwcListItem & JSXBase.HTMLAttributes<HTMLMwcListItemElement>;
            "mwc-menu": LocalJSX.MwcMenu & JSXBase.HTMLAttributes<HTMLMwcMenuElement>;
            "mwc-menu-item": LocalJSX.MwcMenuItem & JSXBase.HTMLAttributes<HTMLMwcMenuItemElement>;
            "mwc-paper": LocalJSX.MwcPaper & JSXBase.HTMLAttributes<HTMLMwcPaperElement>;
            "mwc-progress": LocalJSX.MwcProgress & JSXBase.HTMLAttributes<HTMLMwcProgressElement>;
            "mwc-radio": LocalJSX.MwcRadio & JSXBase.HTMLAttributes<HTMLMwcRadioElement>;
            "mwc-select": LocalJSX.MwcSelect & JSXBase.HTMLAttributes<HTMLMwcSelectElement>;
            "mwc-slider": LocalJSX.MwcSlider & JSXBase.HTMLAttributes<HTMLMwcSliderElement>;
            "mwc-snackbar": LocalJSX.MwcSnackbar & JSXBase.HTMLAttributes<HTMLMwcSnackbarElement>;
            "mwc-switch": LocalJSX.MwcSwitch & JSXBase.HTMLAttributes<HTMLMwcSwitchElement>;
            "mwc-tabbar": LocalJSX.MwcTabbar & JSXBase.HTMLAttributes<HTMLMwcTabbarElement>;
            "mwc-textfield": LocalJSX.MwcTextfield & JSXBase.HTMLAttributes<HTMLMwcTextfieldElement>;
            "mwc-theme": LocalJSX.MwcTheme & JSXBase.HTMLAttributes<HTMLMwcThemeElement>;
            "mwc-toolbar": LocalJSX.MwcToolbar & JSXBase.HTMLAttributes<HTMLMwcToolbarElement>;
            "mwc-toolbar-icon": LocalJSX.MwcToolbarIcon & JSXBase.HTMLAttributes<HTMLMwcToolbarIconElement>;
            "mwc-toolbar-section": LocalJSX.MwcToolbarSection & JSXBase.HTMLAttributes<HTMLMwcToolbarSectionElement>;
            "mwc-toolbar-title": LocalJSX.MwcToolbarTitle & JSXBase.HTMLAttributes<HTMLMwcToolbarTitleElement>;
            "mwc-typography": LocalJSX.MwcTypography & JSXBase.HTMLAttributes<HTMLMwcTypographyElement>;
            "mwc-viewport": LocalJSX.MwcViewport & JSXBase.HTMLAttributes<HTMLMwcViewportElement>;
            "my-component": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
        }
    }
}
